version: '3.8'

services:
  # API Service
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: notification_api
    restart: unless-stopped
    env_file:
      - ../.env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - notification_network

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: notification_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-notification_system}
      POSTGRES_USER: ${POSTGRES_USER:-myuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
      POSTGRES_HOST_AUTH_METHOD: trust
    env_file:
      - ../.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - notification_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-myuser} -d ${POSTGRES_DB:-notification_system}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Service
  rabbitmq:
    image: rabbitmq:3-management
    container_name: notification_rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - notification_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Celery Worker
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: notification_worker
    command: celery -A app.worker.tasks.celery_app worker --loglevel=info
    restart: unless-stopped
    env_file:
      - ../.env
    depends_on:
      - app
      - rabbitmq
    networks:
      - notification_network

networks:
  notification_network:
    driver: bridge
volumes:
  postgres_data:
